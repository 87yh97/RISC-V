.text
__start: 
  .globl __start
    
    la a0, array_length     #\Загрузка в a0 длины массива
    lw a0, 0(a0)            #/
    
    beqz a0, finish         # Если массив пустой, то переходим сразу в конец
    
    la a1, num_of_shifts    #\Загрузка в a1 количества сдвигов
    lw a1, 0(a1)            #/
    
    remu a1, a1, a0         #a1 = a1 % a0, убираем полные круги сдвигов
    
    beqz a1, finish         #Если сдвигов 0, то переходим в конец
    
    la a2, shift_direction  #\Загрузка в a2 параметра направления сдвига
    lw a2, 0(a2)            #/
  
    beqz a2, pass          # если a2 = 0, то переходим к сдвигу вправо
    sub a1, a0, a1          # a2 = a0 - a1, если задан сдвиг влево, то производится
                            # (len - n) сдвигов вправо
    
  pass:
    mv a2, a1               # помещаем в a2 номер первого замещаемого элемента в массиве
    mv t3, a0               # сохраняем количество замещений в t3
    
    la a3, array            # a3 = &array
    addi t4, zero, 4
    mul a4, a1, t4           # a4 = num_of_shifts * 4, помещаем относительный адрес первого замещаемого элемента
    la a7, array            
    add a4, a4, a7          # в a4 абсолютный адрес первого замещаемого элемента
    lw a5, 0(a3)            # помещаем в а5 первый элемент
    lw a6, 0(a4)            # помещаем в а6 первый замещаемый элемент
    
    
  shift_loop:
      beqz t3, finish       # Если a0 = 0, то все замещения сделаны
      sw a5, 0(a4)          # Замещение элемента в массиве
      mv a5, a6             # Сохранение замещенного элемента
      mv a3, a4             # Сохранение адреса замещенного элемента
      add a2, a2, a1        # Добавляем к номеру замещаемого значение смещения
      remu a2, a2, a0       # a2 = a2 % a0 = a2 % array_len
      mul a4, a2, t4        # Получаем смещение замещаемого относительно начала массива в байтах
    
      add a4, a4, a7        # Получаем абсолютный адрес замещаемого элемента
      lw a6, 0(a4)          # Загружаем в a6 замещаемый элемент
      addi t3, t3, -1       # Уменьшаем количество оставшихся замещений на 1
      jal zero, shift_loop
      
      
  finish:
    li a0, 10
    ecall
    
    
.rodata
  array_length: 
    #.word 2
    .word 11
  num_of_shifts:
    .word 36
  shift_direction:
    .word 0      # 0 -> сдвиг вправо; !0 -> сдвиг влево
.data
  array:
    #.word 0xFF, 0xDD
    .word 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10